<tokens><keyword> class </keyword><identifier> Square </identifier><symbol> { </symbol><keyword> field </keyword><keyword> int </keyword><symbol> x </symbol><symbol> , </symbol><symbol> y </symbol><symbol> ; </symbol><keyword> field </keyword><keyword> int </keyword><identifier> size </identifier><symbol> ; </symbol><keyword> constructor </keyword><identifier> Square </identifier><identifier> new </identifier><symbol> ( </symbol><keyword> int </keyword><identifier> Ax </identifier><symbol> , </symbol><keyword> int </keyword><identifier> Ay </identifier><symbol> , </symbol><keyword> int </keyword><identifier> Asize </identifier><symbol> ) </symbol><symbol> { </symbol><keyword> let </keyword><symbol> x </symbol><symbol> = </symbol><identifier> Ax </identifier><symbol> ; </symbol><keyword> let </keyword><symbol> y </symbol><symbol> = </symbol><identifier> Ay </identifier><symbol> ; </symbol><keyword> let </keyword><identifier> size </identifier><symbol> = </symbol><identifier> Asize </identifier><symbol> ; </symbol><keyword> do </keyword><identifier> draw </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> ; </symbol><keyword> return </keyword><keyword> this </keyword><symbol> ; </symbol><symbol> } </symbol><keyword> method </keyword><keyword> void </keyword><identifier> dispose </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> do </keyword><identifier> Memory </identifier><symbol> . </symbol><identifier> deAlloc </identifier><symbol> ( </symbol><keyword> this </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> return </keyword><symbol> ; </symbol><symbol> } </symbol><keyword> method </keyword><keyword> void </keyword><identifier> draw </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><keyword> true </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><symbol> x </symbol><symbol> , </symbol><symbol> y </symbol><symbol> , </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> , </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> ; </symbol><keyword> return </keyword><symbol> ; </symbol><symbol> } </symbol><keyword> method </keyword><keyword> void </keyword><identifier> erase </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><keyword> false </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><symbol> x </symbol><symbol> , </symbol><symbol> y </symbol><symbol> , </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> , </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> ; </symbol><keyword> return </keyword><symbol> ; </symbol><symbol> } </symbol><keyword> method </keyword><keyword> void </keyword><identifier> incSize </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> if </keyword><symbol> ( </symbol><symbol> ( </symbol><symbol> ( </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> &lt; </symbol><integerConstant> 254 </integerConstant><symbol> ) </symbol><symbol> &amp; </symbol><symbol> ( </symbol><symbol> ( </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> &lt; </symbol><integerConstant> 510 </integerConstant><symbol> ) </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> do </keyword><identifier> erase </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> ; </symbol><keyword> let </keyword><identifier> size </identifier><symbol> = </symbol><identifier> size </identifier><symbol> + </symbol><symbol> 2 </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> draw </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> ; </symbol><symbol> } </symbol><keyword> return </keyword><symbol> ; </symbol><symbol> } </symbol><keyword> method </keyword><keyword> void </keyword><identifier> decSize </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> if </keyword><symbol> ( </symbol><identifier> size </identifier><symbol> &gt; </symbol><symbol> 2 </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> do </keyword><identifier> erase </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> ; </symbol><keyword> let </keyword><identifier> size </identifier><symbol> = </symbol><identifier> size </identifier><symbol> - </symbol><symbol> 2 </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> draw </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> ; </symbol><symbol> } </symbol><keyword> return </keyword><symbol> ; </symbol><symbol> } </symbol><keyword> method </keyword><keyword> void </keyword><identifier> moveUp </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> if </keyword><symbol> ( </symbol><symbol> y </symbol><symbol> &gt; </symbol><symbol> 1 </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><keyword> false </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><symbol> x </symbol><symbol> , </symbol><symbol> ( </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> - </symbol><symbol> 1 </symbol><symbol> , </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> , </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> ; </symbol><keyword> let </keyword><symbol> y </symbol><symbol> = </symbol><symbol> y </symbol><symbol> - </symbol><symbol> 2 </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><keyword> true </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><symbol> x </symbol><symbol> , </symbol><symbol> y </symbol><symbol> , </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> , </symbol><symbol> y </symbol><symbol> + </symbol><symbol> 1 </symbol><symbol> ) </symbol><symbol> ; </symbol><symbol> } </symbol><keyword> return </keyword><symbol> ; </symbol><symbol> } </symbol><keyword> method </keyword><keyword> void </keyword><identifier> moveDown </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> if </keyword><symbol> ( </symbol><symbol> ( </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> &lt; </symbol><integerConstant> 254 </integerConstant><symbol> ) </symbol><symbol> { </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><keyword> false </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><symbol> x </symbol><symbol> , </symbol><symbol> y </symbol><symbol> , </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> , </symbol><symbol> y </symbol><symbol> + </symbol><symbol> 1 </symbol><symbol> ) </symbol><symbol> ; </symbol><keyword> let </keyword><symbol> y </symbol><symbol> = </symbol><symbol> y </symbol><symbol> + </symbol><symbol> 2 </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><keyword> true </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><symbol> x </symbol><symbol> , </symbol><symbol> ( </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> - </symbol><symbol> 1 </symbol><symbol> , </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> , </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> ; </symbol><symbol> } </symbol><keyword> return </keyword><symbol> ; </symbol><symbol> } </symbol><keyword> method </keyword><keyword> void </keyword><identifier> moveLeft </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> if </keyword><symbol> ( </symbol><symbol> x </symbol><symbol> &gt; </symbol><symbol> 1 </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><keyword> false </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><symbol> ( </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> - </symbol><symbol> 1 </symbol><symbol> , </symbol><symbol> y </symbol><symbol> , </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> , </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> ; </symbol><keyword> let </keyword><symbol> x </symbol><symbol> = </symbol><symbol> x </symbol><symbol> - </symbol><symbol> 2 </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><keyword> true </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><symbol> x </symbol><symbol> , </symbol><symbol> y </symbol><symbol> , </symbol><symbol> x </symbol><symbol> + </symbol><symbol> 1 </symbol><symbol> , </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> ; </symbol><symbol> } </symbol><keyword> return </keyword><symbol> ; </symbol><symbol> } </symbol><keyword> method </keyword><keyword> void </keyword><identifier> moveRight </identifier><symbol> ( </symbol><symbol> ) </symbol><symbol> { </symbol><keyword> if </keyword><symbol> ( </symbol><symbol> ( </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> &lt; </symbol><integerConstant> 510 </integerConstant><symbol> ) </symbol><symbol> { </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><keyword> false </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><symbol> x </symbol><symbol> , </symbol><symbol> y </symbol><symbol> , </symbol><symbol> x </symbol><symbol> + </symbol><symbol> 1 </symbol><symbol> , </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> ; </symbol><keyword> let </keyword><symbol> x </symbol><symbol> = </symbol><symbol> x </symbol><symbol> + </symbol><symbol> 2 </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> setColor </identifier><symbol> ( </symbol><keyword> true </keyword><symbol> ) </symbol><symbol> ; </symbol><keyword> do </keyword><identifier> Screen </identifier><symbol> . </symbol><identifier> drawRectangle </identifier><symbol> ( </symbol><symbol> ( </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> - </symbol><symbol> 1 </symbol><symbol> , </symbol><symbol> y </symbol><symbol> , </symbol><symbol> x </symbol><symbol> + </symbol><identifier> size </identifier><symbol> , </symbol><symbol> y </symbol><symbol> + </symbol><identifier> size </identifier><symbol> ) </symbol><symbol> ; </symbol><symbol> } </symbol><keyword> return </keyword><symbol> ; </symbol><symbol> } </symbol><symbol> } </symbol></tokens>